worker_processes  1;

pid logs/nginx.pid;

error_log logs/error.log info;
error_log logs/debug.log debug;

events {
    use epoll;
    worker_connections  1024;
    multi_accept on;
}

stream {
    # other STREAM upstreams
    include conf.d/other/upstream/stream/*.conf;
}

http {
    # dictionary for configuration
    lua_shared_dict config 10m;

    # all of the services configuration
    include conf.d/sysconfig/*.ini;

    # path to LUA modules
    lua_package_path "lib/?.lua;;lua/?.lua;;conf/conf.d/?.lua;;";
    lua_package_cpath "lib/lua/5.1/?.so;;";

    include       mime.types;
    default_type  text/plain;

    log_format  main  '[$time_local] [$server_name:$server_port] $request $status $upstream_addr';

    access_log  logs/access.log  main;

    keepalive_timeout  60;
    keepalive_requests 10000;

    map $http_x_real_ip $real_ip {
        ""      "$remote_addr";
        default "$http_x_real_ip";
    }

    lua_socket_log_errors off;

    # other HTTP upstreams
    include conf.d/other/upstream/http/*.conf;

    include conf.d/healthcheck.conf;
    include conf.d/other/server/*.conf;

    init_worker_by_lua_block {
        local system = require "system"

        -- sysconfig
        local files = system.getfiles("conf/conf.d/sysconfig", ".+%.lua$")
        for _, file in pairs(files)
        do
            local name = file:match("([^%.]+)")
            ngx.log(ngx.INFO, "Configuring " .. name .. " ...")
            local ok, script = pcall(require, "sysconfig." .. name)
            script.config()
        end

        -- initd
        local files = system.getfiles("lua/initd/startup", ".+%.lua$")
        for _, file in pairs(files)
        do
            local name = file:match("([^%.]+)")
            ngx.log(ngx.INFO, "Startup " .. name .. " ...")
            local ok, script = pcall(require, "initd.startup." .. name)
            script.startup()
        end
    }
}
