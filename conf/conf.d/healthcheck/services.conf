location /services {
  default_type application/json;
  content_by_lua_block {
    local cjson = require "cjson"

    local get_services = function(upstream)
      local services = {}

      local ok, upstreams, err = upstream.get_upstreams()
      if not ok then
        ngx.status = ngx.HTTP_INTERNAL_SERVER_ERROR
        ngx.print(err)
        ngx.exit(ngx.status)
      end

      for j=1,#upstreams
      do
        local u = upstreams[j]
        local ok, peers, err = upstream.get_peers(u)
        if not ok then
          ngx.status = ngx.HTTP_INTERNAL_SERVER_ERROR
          ngx.print(err)
          ngx.exit(ngx.status)
        end

        for i=1,#peers
        do
          local peer = peers[i]

          local host, port = peer.name:match("(.+):(%d+)")
          if not host then
            host, port = peer.name, nil
          end

          if not services[host] then
            services[host] = {}
          end
          if not services[host][u] then
            services[host][u] = {}
          end

          table.insert(services[host][u], {
            port = tonumber(port),
            backup = peer.backup,
            down = peer.down
          })
        end
      end

      local result = {}
      for ip, services in pairs(services)
      do
        table.insert(result, {
          ip = ip,
          services = services
        })
      end

      return result
    end

    local result = {}

    result.http = get_services(require "ngx.dynamic_upstream")
    result.stream = get_services(require "ngx.dynamic_upstream.stream")

    ngx.print(cjson.encode(result))
  }
}