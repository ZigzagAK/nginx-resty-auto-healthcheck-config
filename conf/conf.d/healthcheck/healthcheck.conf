location /javascript {
  root conf/conf.d/healthcheck;
}

location = /healthchecks/http {
  default_type application/json;
  content_by_lua_block {
    local hc = require "ngx.healthcheck"
    local cjson = require "cjson"
    ngx.say(cjson.encode(assert(hc.get())))
  }
}

location = /healthchecks/stream {
  default_type application/json;
  content_by_lua_block {
    local hc = require "ngx.healthcheck.stream"
    local cjson = require "cjson"
    ngx.say(cjson.encode(assert(hc.get())))
  }
}

location ~* ^/status/([^/]+)$ {
  set $type $1;
  default_type text/html;
  content_by_lua_block {
    local healthcheck
    local mod
    local cjson = require "cjson"
    local output = {}

    local function print(s)
      table.insert(output, s or "")
    end

    local function say(s)
      table.insert(output, (s or "") .. "\n")
    end

    local function flush()
      ngx.say(table.concat(output))
    end

    if ngx.var.type == "http" then
      local upstream = require "ngx.dynamic_upstream"
      mod = {
        upstreams = upstream.get_upstreams,
        peers = upstream.get_peers
      }
      healthcheck = require "ngx.healthcheck"
    elseif ngx.var.type == "stream" then
      local upstream = require "ngx.dynamic_upstream.stream"
      mod = {
        upstreams = upstream.get_upstreams,
        peers = upstream.get_peers
      }
      healthcheck = require "ngx.healthcheck.stream"
    else
      return
    end

    local ok, upstreams, error = mod.upstreams()

    if not ok then
      ngx.say(error)
      ngx.exit(ngx.HTTP_OK)
    end

    local function successes(upstream, server)
      local status = healthcheck.status(upstream)
      if not status or not status.primary then
        return 0
      end
      return (status.primary[server.name] or (status.backup or {})[server.name] or { rise_total = 0 }).rise_total
    end

    local function fails(upstream, server)
      local status = healthcheck.status(upstream)
      if not status or not status.primary then
        return 0
      end
      return (status.primary[server.name] or (status.backup or {})[server.name] or { fall_total = 0 }).fall_total
    end

    local print_header_html = function(upstream, up_count, total)
      local bgcolor = "green"
      local status

      if up_count == 0 then
        if total ~= 0 then
          bgcolor = "red"
          status = "down (" .. up_count .. "/" .. total .. ")"
        else
          bgcolor = "gray"
          status = "no peers"
        end
      else
        status = "up (" .. up_count .. "/" .. total .. ")"
      end

      say("<tr class='header'>")
      say("  <th colspan=10 align=center><b>" .. upstream .. " <span>-</span></b></th>")
      say("  <td bgcolor='" .. bgcolor .. "' align=center>" .. status .. "</td>")
      say("</tr>")
    end

    local print_row_html = function(upstream, server, i)
      if server.name == "0.0.0.0:1" then
        say("<tr>")
        say("  <td colspan=10 align=center>no peers</td>")
        say("  <td></td>")
        say("</tr>")
        return
      end
      local status = "up"
      local bgcolor = "green"
      if server.down ~= nil then
        status = "down"
        bgcolor = "red"
      end
      local typ = "primary"
      if server.backup then
        typ = "backup"
      end
      say("<tr>")
      say("  <td width=40 align=center>"  .. i .. "</td>")
      say("  <td width=400>" .. server.name .. "</td>")
      say("  <td width=150 align=center>" .. typ .. "</td>")
      say("  <td width=150 align=center>" .. server.weight .. "</td>")
      say("  <td width=150 align=center>" .. server.max_conns .. "</td>")
      say("  <td width=150 align=center>" .. server.conns .. "</td>")
      say("  <td width=150 align=center>" .. server.max_fails .. "</td>")
      say("  <td width=150 align=center>" .. server.fail_timeout .. "</td>")
      say("  <td width=150 align=center>" .. successes(upstream, server) .. "</td>")
      say("  <td width=150 align=center>" .. fails(upstream, server) .. "</td>")
      say("  <td width=100 align=center bgcolor=" .. bgcolor .. ">" .. status .. "</td>")
      say("</tr>")
    end

    local print_header_json = function(upstream, ctx)
      ctx[upstream] = {}
    end

    local print_row_json = function(upstream, server, ctx)
      local status = "up"
      if server.down ~= nil then
        status = "down"
      end
      table.insert(ctx[upstream], {
        server       = server.name,
        backup       = server.backup,
        weight       = server.weight,
        max_conns    = server.max_conns,
        conns        = server.conns,
        max_fails    = server.max_fails,
        fail_timeout = server.fail_timeout,
        successes    = successes(upstream, server),
        fails        = fails(upstream, server),
        status       = status
      })
    end

    local print_header_text = function(upstream)
      say(upstream)
    end

    local print_row_text = function(upstream, server)
      local status = "up"
      if server.down ~= nil then
        status = "down"
      end
      print("       server " .. server.name)
      print(      " weight=" .. server.weight)
      print(   " max_conns=" .. server.max_conns)
      print(       " conns=" .. server.conns)
      print(   " max_fails=" .. server.max_fails)
      print(" fail_timeout=" .. server.fail_timeout)
      print(   " successes=" .. successes(upstream, server))
      print(       " fails=" .. fails(upstream, server))
      print(      " status=" .. status)
      if server.backup then
        print(" backup")
      end
      say()
    end

    local print_upstream = function(upstream, fmt)
      local ok, servers, error = mod.peers(upstream)
      if not ok then
        print(error)
        return
      end

      fmt.header(upstream, servers)

      for i, server in ipairs(servers)
      do
        fmt.row(upstream, server, i)
      end
    end

    local ctx
    local f = {
      json = {
        beg = function()
          ctx = {}
        end,
        fin = function()
          local cjson = require "cjson"
          say(cjson.encode(ctx))
        end,
        header = function(upstream)
          print_header_json(upstream, ctx)
        end,
        row = function(upstream, server)
          print_row_json(upstream, server, ctx)
        end
      },
      text = {
        beg = function() end,
        fin = function() end,
        header = print_header_text,
        row = print_row_text
      },
      html = {
        beg = function()
          say("<!DOCTYPE html>")
          say("<html>")
          say("<head>")
          say("<title>Endpoint's statuses</title>")
          say("<script type='text/javascript' src='/javascript/jquery-1.9.1.js'></script>")
          say("<style TYPE='text/css'>")
          say("th {")
          say("background-color: silver;")
          say("}")
          say("table, tr, td, th {")
          say("border: 1px solid black;")
          say("border-collapse:collapse;")
          say("}")
          say("tr.header {")
          say("cursor:pointer;")
          say("}")
          say("</style>")
          say("<script type='text/javascript'>//<![CDATA[")
          say("$(function(){")
          say("var $headers = $('.header').click(function () {")
          say("  $(this).find('span').text(function (_, value) {")
          say("    return value == '-' ? '+' : '-'")
          say("  });")
          say("  $(this).nextUntil('tr.header').slideToggle(100, function () {});")
          say("});")
          say("$headers.find('span').text('+')")
          say("$('table tr:not(.header)').hide()")
          say("});//]]>")
          say("</script>")
          say("</head>")
          say("<body>")
          say("<table border=2 width='100%'>")
          say("<tr class='header'>")
          say("  <td width=40 align=center><b>N</b></td>")
          say("  <td width=400 align=center><b>ENDPOINT</b></td>")
          say("  <td width=150 align=center><b>TYPE</b></td>")
          say("  <td width=150 align=center><b>WEIGHT</b></td>")
          say("  <td width=150 align=center><b>MAX_CONNS</b></td>")
          say("  <td width=150 align=center><b>CONNS</b></td>")
          say("  <td width=150 align=center><b>MAX FAILS</b></td>")
          say("  <td width=150 align=center><b>FAIL TIMEOUT</b></td>")
          say("  <td width=150 align=center><b>SUCCESSES</b></td>")
          say("  <td width=150 align=center><b>FAILS</b></td>")
          say("  <td width=100 align=center><b>STATUS</b></td>")
          say("</tr>")
        end,
        fin = function()
          say("</table>")
          say("</body>")
          say("</html>")
        end,
        header = function(upstream, servers)
          local alive = 0
          local total
          for _, server in ipairs(servers)
          do
            if not server.down then
              alive = alive + 1
            end
          end
          if #servers == 1 and servers[1].name == "0.0.0.0:1" then
            total = 0
          else
            total = #servers
          end
          print_header_html(upstream, alive, total)
        end,
        row = print_row_html
      }
    }

    local fmt = f.html

    if ngx.var.arg_format == "text" then
      fmt = f.text
      ngx.header.content_type = "text/plain"
    elseif ngx.var.arg_format == "json" then
      fmt = f.json
      ngx.header.content_type = "application/json"
    else
      ngx.header.content_type = "text/html"
    end

    fmt.beg()

    local selected = ngx.var.arg_upstream

    for _, upstream in pairs(upstreams)
    do
      if not selected or selected == upstream then
        print_upstream(upstream, fmt)
      end
    end

    fmt.fin()

    flush()
  }
}
