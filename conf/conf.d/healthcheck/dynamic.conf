location = /http/enable_peer {
  default_type text/plain;
  content_by_lua_block {
    local dynamic = require "dynamic"
    dynamic.http.enable_peer(ngx.var.arg_upstream, ngx.var.arg_peer)
    ngx.print("OK")
  }
}

location = /http/disable_peer {
  default_type text/plain;
  content_by_lua_block {
    local dynamic = require "dynamic"
    dynamic.http.disable_peer(ngx.var.arg_upstream, ngx.var.arg_peer)
    ngx.print("OK")
  }
}

location = /http/enable_upstream {
  default_type text/plain;
  content_by_lua_block {
    local dynamic = require "dynamic"
    dynamic.http.enable_upstream(ngx.var.arg_upstream)
    ngx.print("OK")
  }
}

location = /http/disable_upstream {
  default_type text/plain;
  content_by_lua_block {
    local dynamic = require "dynamic"
    dynamic.http.disable_upstream(ngx.var.arg_upstream)
    ngx.print("OK")
  }
}

location = /http/enable_primary {
  default_type text/plain;
  content_by_lua_block {
    local dynamic = require "dynamic"
    dynamic.http.enable_primary_peers(ngx.var.arg_upstream)
    ngx.print("OK")
  }
}

location = /http/disable_primary {
  default_type text/plain;
  content_by_lua_block {
    local dynamic = require "dynamic"
    dynamic.http.disable_primary_peers(ngx.var.arg_upstream)
    ngx.print("OK")
  }
}

location = /http/enable_backup {
  default_type text/plain;
  content_by_lua_block {
    local dynamic = require "dynamic"
    dynamic.http.enable_backup_peers(ngx.var.arg_upstream)
    ngx.print("OK")
  }
}

location = /http/disable_backup {
  default_type text/plain;
  content_by_lua_block {
    local dynamic = require "dynamic"
    dynamic.http.disable_backup_peers(ngx.var.arg_upstream)
    ngx.print("OK")
  }
}

location = /stream/enable_peer {
  default_type text/plain;
  content_by_lua_block {
    local dynamic = require "dynamic"
    dynamic.stream.enable_peer(ngx.var.arg_upstream, ngx.var.arg_peer)
    ngx.print("OK")
  }
}

location = /stream/disable_peer {
  default_type text/plain;
  content_by_lua_block {
    local dynamic = require "dynamic"
    dynamic.stream.disable_peer(ngx.var.arg_upstream, ngx.var.arg_peer)
    ngx.print("OK")
  }
}

location = /stream/enable_upstream {
  default_type text/plain;
  content_by_lua_block {
    local dynamic = require "dynamic"
    dynamic.stream.enable_upstream(ngx.var.arg_upstream)
    ngx.print("OK")
  }
}

location = /stream/disable_upstream {
  default_type text/plain;
  content_by_lua_block {
    local dynamic = require "dynamic"
    dynamic.stream.disable_upstream(ngx.var.arg_upstream)
    ngx.print("OK")
  }
}

location = /stream/enable_primary {
  default_type text/plain;
  content_by_lua_block {
    local dynamic = require "dynamic"
    dynamic.stream.enable_primary_peers(ngx.var.arg_upstream)
    ngx.print("OK")
  }
}

location = /stream/disable_primary {
  default_type text/plain;
  content_by_lua_block {
    local dynamic = require "dynamic"
    dynamic.stream.disable_primary_peers(ngx.var.arg_upstream)
    ngx.print("OK")
  }
}

location = /stream/enable_backup {
  default_type text/plain;
  content_by_lua_block {
    local dynamic = require "dynamic"
    dynamic.stream.enable_backup_peers(ngx.var.arg_upstream)
    ngx.print("OK")
  }
}

location = /stream/disable_backup {
  default_type text/plain;
  content_by_lua_block {
    local dynamic = require "dynamic"
    dynamic.stream.disable_backup_peers(ngx.var.arg_upstream)
    ngx.print("OK")
  }
}

location = /http/enable_ip {
  default_type text/plain;
  content_by_lua_block {
    local dynamic = require "dynamic"
    dynamic.http.enable_ip(ngx.var.arg_ip)
    ngx.print("OK")
  }
}

location = /http/disable_ip {
  default_type text/plain;
  content_by_lua_block {
    local dynamic = require "dynamic"
    dynamic.http.disable_ip(ngx.var.arg_ip)
    ngx.print("OK")
  }
}

location = /stream/enable_ip {
  default_type text/plain;
  content_by_lua_block {
    local dynamic = require "dynamic"
    dynamic.stream.enable_ip(ngx.var.arg_ip)
    ngx.print("OK")
  }
}

location = /stream/disable_ip {
  default_type text/plain;
  content_by_lua_block {
    local dynamic = require "dynamic"
    dynamic.stream.disable_ip(ngx.var.arg_ip)
    ngx.print("OK")
  }
}