server {
  listen 8181;

  server_name healthcheck;

  default_type text/html;

  location ~* ^/status/([^/]+)$ {
    set $type $1;
    content_by_lua_block {
      local upstream_http = require "ngx.dynamic_upstream"
      local upstream_stream  = require "ngx.dynamic_upstream.stream"

      local healthcheck
      local upstream_module

      if ngx.var.type == "http" then
        upstream_module = {
          get_upstreams = upstream_http.get_upstreams,
          get_peers = upstream_http.get_peers
        }
        healthcheck = require "resty.upstream.dynamic.healthcheck.http"
      elseif ngx.var.type == "stream" then
        upstream_module = {
          get_upstreams = upstream_stream.get_upstreams,
          get_peers = upstream_stream.get_peers
        }
        healthcheck = require "resty.upstream.dynamic.healthcheck.stream"
      else
        return;
      end


      local HEALTHCHECK = ngx.shared.healthcheck

      local ok, upstreams, error = upstream_module.get_upstreams()

      if not ok then
        ngx.print(error)
      end

      local print_header_html = function(upstream)
        ngx.say("<tr>")
        ngx.say("  <td colspan=11 align=center><b>" .. upstream .. "</b></td>")
        ngx.say("</tr>")
      end

      local print_row_html = function(upstream, server, i)
        if server.name == "0.0.0.0:1" then
          ngx.say("<tr>")
          ngx.say("  <td colspan=11 align=center>no peers</td>")
          ngx.say("</tr>")
          return
        end
        local status = "up"
        local bgcolor = "green"
        if server.down ~= nil then
          status = "down"
          bgcolor = "red"
        end
        local typ = "primary"
        if server.backup then
          typ = "backup"
        end
        ngx.say("<tr>")
        ngx.say("  <td width=40 align=center>"  .. i .. "</td>")
        ngx.say("  <td width=400>" .. server.name .. "</td>")
        ngx.say("  <td width=150 align=center>" .. typ .. "</td>")
        ngx.say("  <td width=150 align=center>" .. server.weight .. "</td>")
        ngx.say("  <td width=150 align=center>" .. server.max_conns .. "</td>")
        ngx.say("  <td width=150 align=center>" .. server.conns .. "</td>")
        ngx.say("  <td width=150 align=center>" .. server.max_fails .. "</td>")
        ngx.say("  <td width=150 align=center>" .. server.fail_timeout .. "</td>")
        ngx.say("  <td width=150 align=center>" .. healthcheck.successes(HEALTHCHECK, upstream, server) .. "</td>")
        ngx.say("  <td width=150 align=center>" .. healthcheck.fails(HEALTHCHECK, upstream, server) .. "</td>")
        ngx.say("  <td width=100 align=center bgcolor=" .. bgcolor .. ">" .. status .. "</td>")
        ngx.say("</tr>")
      end

      local print_header_json = function(upstream, ctx)
        ctx[upstream] = {}
      end

      local print_row_json = function(upstream, server, ctx)
        local status = "up"
        if server.down ~= nil then
          status = "down"
        end
        table.insert(ctx[upstream], {
          server       = server.name,
          backup       = server.backup,
          weight       = server.weight,
          max_conns    = server.max_conns,
          conns        = server.conns,
          max_fails    = server.max_fails,
          fail_timeout = server.fail_timeout,
          successes    = healthcheck.successes(HEALTHCHECK, upstream, server),
          fails        = healthcheck.fails(HEALTHCHECK, upstream, server),
          status       = status
        })
      end

      local print_header_text = function(upstream)
        ngx.say(upstream)
      end

      local print_row_text = function(upstream, server)
        local status = "up"
        if server.down ~= nil then
          status = "down"
        end
        ngx.print("       server " .. server.name)
        ngx.print(      " weight=" .. server.weight)
        ngx.print(   " max_conns=" .. server.max_conns)
        ngx.print(       " conns=" .. server.conns)
        ngx.print(   " max_fails=" .. server.max_fails)
        ngx.print(" fail_timeout=" .. server.fail_timeout)
        ngx.print(   " successes=" .. healthcheck.successes(HEALTHCHECK, upstream, server))
        ngx.print(       " fails=" .. healthcheck.fails(HEALTHCHECK, upstream, server))
        ngx.print(      " status=" .. status)
        if server.backup then
          ngx.print(" backup")
        end
        ngx.say()
      end

      local print_upstream = function(upstream, fmt)
        local ok, servers, error = upstream_module.get_peers(upstream)
        if not ok then
          ngx.print(error)
          return
        end

        fmt.header(upstream)

        for i, server in pairs(servers)
        do
          fmt.row(upstream, server, i)
        end
      end

      local f = {
        json = {
          ctx,
          beg = function()
            ctx = {}
          end,
          fin = function()
            local cjson = require "cjson"
            ngx.say(cjson.encode(ctx))
          end,
          header = function(upstream)
            print_header_json(upstream, ctx)
          end,
          row = function(upstream, server)
            print_row_json(upstream, server, ctx)
          end
        },
        text = {
          beg = function() end,
          fin = function() end,
          header = print_header_text,
          row = print_row_text
        },
        html = {
          beg = function()
            ngx.say("<!DOCTYPE html>")
            ngx.say("<html>")
            ngx.say("<head><title>Endpoint's statuses</title></head>")
            ngx.say("<body>")
            ngx.say("<table border=2>")
            ngx.say("<tr>")
            ngx.say("  <td width=40 align=center><b>N</b></td>")
            ngx.say("  <td width=400 align=center><b>ENDPOINT</b></td>")
            ngx.say("  <td width=150 align=center><b>TYPE</b></td>")
            ngx.say("  <td width=150 align=center><b>WEIGHT</b></td>")
            ngx.say("  <td width=150 align=center><b>MAX_CONNS</b></td>")
            ngx.say("  <td width=150 align=center><b>CONNS</b></td>")
            ngx.say("  <td width=150 align=center><b>MAX FAILS</b></td>")
            ngx.say("  <td width=150 align=center><b>FAIL TIMEOUT</b></td>")
            ngx.say("  <td width=150 align=center><b>SUCCESSES</b></td>")
            ngx.say("  <td width=150 align=center><b>FAILS</b></td>")
            ngx.say("  <td width=100 align=center><b>STATUS</b></td>")
            ngx.say("</tr>")
          end,
          fin = function()
            ngx.say("</table>")
            ngx.say("</body>")
            ngx.say("</html>")
          end,
          header = print_header_html,
          row = print_row_html
        }
      }

      local fmt = f.html

      if ngx.var.arg_format == "text" then
        fmt = f.text
        ngx.header.content_type = "text/plain"
      elseif ngx.var.arg_format == "json" then
        fmt = f.json
        ngx.header.content_type = "application/json"
      else
        ngx.header.content_type = "text/html"
      end

      fmt.beg()

      for _, upstream in pairs(upstreams)
      do
        print_upstream(upstream, fmt)
      end

      fmt.fin()
    }
  }
}
