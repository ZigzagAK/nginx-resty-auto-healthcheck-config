server {
  listen 8282;

  server_name lastlog;

  default_type application/json;

  location /lastlog/json {
    content_by_lua_block {
      local lastlog = require "lastlog"
      local cjson = require "cjson"
      local req_stat,
            ups_stat,
            http_x,
            start_time, end_time,
            start_request_time, end_request_time = lastlog.get_statistic(ngx.var.arg_period, ngx.var.arg_backward)
      ngx.say(cjson.encode({ requests_statistic = req_stat, upstream_staistic = ups_stat, http_x = http_x }))
    }
  }

  location /lastlog/text {
    default_type text/plain;
    content_by_lua_block {
      local lastlog = require "lastlog"
      local cjson = require "cjson"

      local req_stat,
            ups_stat,
            http_x,
            start_time, end_time,
            start_request_time, end_request_time = lastlog.get_statistic(ngx.var.arg_period, ngx.var.arg_backward)

      ngx.say("Upstreams")
      ngx.say()

      local function round(num, idp)
        local mult = 10^(idp or 0)
        return math.floor(num * mult + 0.5) / mult
      end

      for u, peers in pairs(ups_stat)
      do
        ngx.say("    " .. u)
        local reqs = 0
        local current_rps = 0
        for peer, data in pairs(peers)
        do
          ngx.say("        server " .. peer)
          for status, stat in pairs(data)
          do
            ngx.say("            http_" .. status .. " : count=" .. stat.count ..
                                                    ", latency=" .. round(stat.latency, 6) ..
                                                    ", avg rps=" .. math.floor(stat.count / (end_time - start_time)) ..
                                                    ", current rps=" .. math.floor(stat.current_rps or 0))
            reqs = reqs + stat.count
            current_rps = current_rps + (stat.current_rps or 0)
          end
          ngx.say()
        end
        ngx.say("        Average req/seq: " .. math.floor(reqs / (end_time - start_time)))
        ngx.say("        Current req/seq: " .. math.floor(current_rps))
        ngx.say()
      end

      local reqs = 0
      local current_rps = 0

      ngx.say("Requests")
      ngx.say()
      ngx.say("       Latency |    Count | curr RPS | Request")
      for status, peers in pairs(http_x)
      do
        ngx.say("    http_" .. status)
        for _, data in ipairs(peers)
        do
          ngx.say(string.format("        %-.4f : %8d : %8d : %s", round(data.stat.latency, 6), data.stat.count, data.stat.current_rps or 0, data.uri))
          reqs = reqs + data.stat.count
          current_rps = current_rps + (data.stat.current_rps or 0)
        end
        ngx.say()
      end

      if reqs ~= 0 then
        ngx.say("Average req/seq: " .. math.floor(reqs / (end_time - start_time)))
        ngx.say("Current req/seq: " .. math.floor(current_rps))
      end
    }
  }
}