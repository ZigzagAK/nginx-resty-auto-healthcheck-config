location /lastlog/json {
  default_type application/json;
  content_by_lua_block {
    local lastlog = require "lastlog"
    local cjson = require "cjson"

    local req_stat
    local ups_stat
    local http_x
    local from = tonumber(ngx.var.arg_from)
    local offset, period

    if from then
      req_stat, ups_stat, http_x, offset, period = lastlog.get_statistic_from(from, ngx.var.arg_period, ngx.var.arg_withports)
    else
      req_stat, ups_stat, http_x, offset, period = lastlog.get_statistic(ngx.var.arg_period, ngx.var.arg_backward, ngx.var.arg_withports)
    end

    ngx.say(cjson.encode {
      offset = offset,
      period = period,
      requests_statistic = req_stat,
      upstream_staistic = ups_stat,
      http_x = http_x
    })
  }
}

location /lastlog/array {
  default_type application/json;
  content_by_lua_block {
    local lastlog = require "lastlog"
    local cjson = require "cjson"
    local t;
    local from = tonumber(ngx.var.arg_from)
    if from then
      t = lastlog.get_statistic_table_from(from, ngx.var.arg_period, ngx.var.arg_portion, ngx.var.arg_withports)
    else
      t = lastlog.get_statistic_table(ngx.var.arg_period, ngx.var.arg_portion, ngx.var.arg_backward, ngx.var.arg_withports)
    end
    ngx.say(cjson.encode(t))
  }
}

location /lastlog/text {
  default_type text/plain;
  content_by_lua_block {
    local lastlog = require "lastlog"
    local cjson = require "cjson"

    local foreach, foreach_v = lib.foreach, lib.foreach_v
    local min, max = math.min, math.max

    local req_stat
    local ups_stat
    local http_x
    local from = tonumber(ngx.var.arg_from)
    local offset, period

    if from then
      req_stat, ups_stat, http_x, offset, period = lastlog.get_statistic_from(from, ngx.var.arg_period, false)
    else
      req_stat, ups_stat, http_x, offset, period = lastlog.get_statistic(ngx.var.arg_period, ngx.var.arg_backward, false)
    end

    local round = function(num, idp)
      local mult = 10^(idp or 0)
      return math.floor(num * mult + 0.5) / mult
    end

    ngx.say(os.date('%Y-%m-%d %H:%M:%S', offset) .. " - " .. os.date('%Y-%m-%d %H:%M:%S', offset + period))
    ngx.say()

    ngx.say("Requests")
    ngx.say()
    ngx.say("     Latency(ms) |    Count | Percent |  avg RPS | curr RPS | Request")

    foreach(http_x, function(status, list)
      ngx.say("    http_" .. status)

      local sum_latency = 0
      local sum_count = 0

      foreach(list, function(uri, stat)
        ngx.say(string.format("        %8.1f : %8d : %7.1f : %8.1f : %8.1f : %s", 1000 * stat.latency,
                                                                                  stat.count,
                                                                                  round(100 * stat.count / req_stat.requests[uri].count, 1),
                                                                                  round(stat.average_rps, 1),
                                                                                  round(stat.current_rps, 1),
                                                                                  uri))
        sum_latency = sum_latency + stat.latency * stat.count
        sum_count = sum_count + stat.count
      end)

      ngx.say()
      ngx.say("        Average latency: " .. round(1000 * sum_latency / sum_count, 1) .. "ms")
      ngx.say()
    end)

    if req_stat.stat.average_latency then
      ngx.say("Average latency: " .. round(1000 * req_stat.stat.average_latency, 1) .. "ms")
    end
    if req_stat.stat.average_rps then
      ngx.say("Average req/sec: " .. math.floor(req_stat.stat.average_rps))
    end
    if req_stat.stat.current_rps then
      ngx.say("Current req/sec: " .. math.floor(req_stat.stat.current_rps))
    end

    if ngx.var.arg_no_upstream == "1" then
      return
    end

    ngx.say()
    ngx.say("Upstreams")
    ngx.say()

    foreach(ups_stat.upstreams, function(u, peers)
      ngx.say("    " .. u)

      foreach(peers, function(peer, data)
        ngx.say("        server " .. peer)
        foreach(data, function(status, stat)
          ngx.say("            http_" .. status .. " : count=" .. stat.count ..
                                          ", average latency=" .. round(1000 * stat.latency, 1) .. "ms" ..
                                              ", average rps=" .. math.floor(stat.count / period) ..
                                              ", current rps=" .. math.floor(stat.current_rps or 0))
        end)
        ngx.say()
      end)

      ngx.say("        Average latency: " .. round(1000 * ups_stat.stat[u].average_latency, 1) .. "ms")
      ngx.say("        Average req/sec: " .. math.floor(ups_stat.stat[u].average_rps))
      ngx.say("        Current req/sec: " .. math.floor(ups_stat.stat[u].current_rps))
      ngx.say()
    end)
  }
}