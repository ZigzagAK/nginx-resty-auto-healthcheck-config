include conf.d/optional/http/*.ini;
include conf.d/optional/http/*.conf;

init_by_lua_block {
  local M = require "pointcuts.common"
  M.init("http")

  local ok, initd = xpcall(require, function(err)
    ngx.log(ngx.ERR, debug.traceback())
    return err
  end, "initd.init")

  if ok then
    initd.sysconfig()
  end

  local ok, init_by = xpcall(require, function(err)
    ngx.log(ngx.ERR, debug.traceback())
    return err
  end, "pointcuts.init_by")

  if ok then
    init_by.make()
  end
}

init_worker_by_lua_block {
  local ok, initd = xpcall(require, function(err)
    ngx.log(ngx.ERR, debug.traceback())
    return err
  end, "initd.init")

  if ok then
    initd.make()
  end

  local ok, access_by = xpcall(require, function(err)
    ngx.log(ngx.ERR, debug.traceback())
    return err
  end, "pointcuts.access_by")

  if ok then
    access_by.make()
  end

  local ok, log_by = xpcall(require, function(err)
    ngx.log(ngx.ERR, debug.traceback())
    return err
  end, "pointcuts.log_by")

  if ok then
    log_by.make()
  end
}

access_by_lua_block {
  local ok, access_by = xpcall(require, function(err)
    ngx.log(ngx.ERR, debug.traceback())
    return err
  end, "pointcuts.access_by")

  if ok then
    access_by.process()
  end
}

log_by_lua_block {
  local ok, log_by = xpcall(require, function(err)
    ngx.log(ngx.ERR, debug.traceback())
    return err
  end, "pointcuts.log_by")

  if ok then
    log_by.process()
  end
}